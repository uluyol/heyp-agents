load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")

cc_library(
    name = "enforcer",
    srcs = ["enforcer.cc"],
    hdrs = ["enforcer.h"],
    visibility = [
        "//heyp/host-agent:__subpackages__",
        "//heyp/integration:__subpackages__",
    ],
    deps = [
        ":iptables-controller",
        ":tc-caller",
        "//heyp/flows:dc-mapper",
        "//heyp/host-agent:enforcer",
        "@com_google_absl//absl/functional:function_ref",
        "@com_google_absl//absl/strings",
        "@glog",
    ],
)

cc_library(
    name = "iptables",
    srcs = ["iptables.cc"],
    hdrs = ["iptables.h"],
    deps = [
        "@boost//:process",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@glog",
    ],
)

cc_library(
    name = "iptables-controller",
    srcs = ["iptables-controller.cc"],
    hdrs = ["iptables-controller.h"],
    deps = [
        ":iptables",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:str_format",
        "@glog",
    ],
)

cc_library(
    name = "tc-caller",
    srcs = ["tc-caller.cc"],
    hdrs = ["tc-caller.h"],
    deps = [
        "//third_party/simdjson",
        "@boost//:process",
        "@com_google_absl//absl/status",
        "@glog",
    ],
)

cc_test(
    name = "iptables-controller-test",
    srcs = ["iptables-controller-test.cc"],
    deps = [
        ":iptables-controller",
        "//heyp/init:test-main",
    ],
)

cc_binary(
    name = "fake-iptables-save-for-test",
    testonly = 1,
    srcs = ["fake-iptables-save-for-test.c"],
)

cc_binary(
    name = "fake-iptables-restore-for-test",
    testonly = 1,
    srcs = ["fake-iptables-restore-for-test.c"],
)

cc_test(
    name = "iptables-test",
    srcs = ["iptables-test.cc"],
    data = [
        ":fake-iptables-restore-for-test",
        ":fake-iptables-save-for-test",
    ],
    deps = [
        ":iptables",
        "//heyp/init:test-main",
    ],
)

cc_binary(
    name = "fake-tc-for-test",
    testonly = 1,
    srcs = ["fake-tc-for-test.c"],
)

cc_test(
    name = "tc-caller-test",
    srcs = ["tc-caller-test.cc"],
    data = [":fake-tc-for-test"],
    deps = [
        ":tc-caller",
        "//heyp/init:test-main",
    ],
)
