load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("//bazel:cc_defs.bzl", "heyp_cc_binary")

package(
    default_visibility = [
        "//heyp/host-agent:__subpackages__",
        "//heyp/integration:__subpackages__",
    ],
)

heyp_cc_binary(
    name = "host-agent",
    srcs = ["host-agent.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":daemon",
        ":enforcer",
        ":flow-tracker",
        "//heyp/cli:parse",
        "//heyp/flows:dc-mapper",
        "//heyp/host-agent/linux-enforcer:data",
        "//heyp/host-agent/linux-enforcer:enforcer",
        "//heyp/init",
        "//heyp/posix:os",
        "//heyp/proto:config_cc_proto",
        "//heyp/proto:fileio",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/random",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "daemon",
    srcs = ["daemon.cc"],
    hdrs = ["daemon.h"],
    deps = [
        ":enforcer",
        ":flow-tracker",
        "//heyp/flows:aggregator",
        "//heyp/flows:dc-mapper",
        "//heyp/proto:constructors",
        "//heyp/proto:heyp_cc_grpc",
        "//heyp/proto:heyp_cc_proto",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
        "//heyp/log",
    ],
)

cc_library(
    name = "enforcer",
    srcs = ["enforcer.cc"],
    hdrs = ["enforcer.h"],
    deps = [
        ":flow-tracker",
        "//heyp/proto:heyp_cc_proto",
        "@com_google_absl//absl/types:span",
        "//heyp/log",
    ],
)

cc_library(
    name = "flow-tracker",
    srcs = ["flow-tracker.cc"],
    hdrs = ["flow-tracker.h"],
    deps = [
        ":urls",
        "//heyp/alg:demand-predictor",
        "//heyp/flows:state",
        "//heyp/proto:alg",
        "@boost//:process",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/functional:function_ref",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
        "//heyp/log",
    ],
)

cc_library(
    name = "simulated-wan-db",
    srcs = ["simulated-wan-db.cc"],
    hdrs = ["simulated-wan-db.h"],
    deps = [
        "//heyp/proto:config_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

cc_library(
    name = "urls",
    srcs = ["urls.cc"],
    hdrs = ["urls.h"],
    visibility = ["//heyp:__subpackages__"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "daemon-test",
    srcs = ["daemon-test.cc"],
    deps = [
        ":daemon",
        "//heyp/flows:dc-mapper",
        "//heyp/init:test-main",
        "//heyp/proto:parse-text",
        "//heyp/proto:testing",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

heyp_cc_binary(
    name = "fake-ss-for-test",
    testonly = 1,
    srcs = ["fake-ss-for-test.cc"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
    ],
)

cc_test(
    name = "flow-tracker-test",
    srcs = ["flow-tracker-test.cc"],
    data = [
        ":fake-ss-for-test",
    ],
    deps = [
        ":flow-tracker",
        "//heyp/alg:demand-predictor",
        "//heyp/init:test-main",
        "//heyp/proto:constructors",
    ],
)

cc_test(
    name = "simulated-wan-db-test",
    srcs = ["simulated-wan-db-test.cc"],
    deps = [
        ":simulated-wan-db",
        "//heyp/init:test-main",
        "//heyp/proto:parse-text",
    ],
)

cc_test(
    name = "urls-test",
    srcs = ["urls-test.cc"],
    deps = [
        ":urls",
        "//heyp/init:test-main",
    ],
)
