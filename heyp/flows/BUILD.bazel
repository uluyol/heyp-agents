load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(default_visibility = ["//heyp:__subpackages__"])

cc_library(
    name = "aggregator",
    srcs = ["aggregator.cc"],
    hdrs = ["aggregator.h"],
    deps = [
        ":agg-marker",
        ":state",
        "//heyp/alg:demand-predictor",
        "//heyp/log:spdlog",
        "//heyp/proto:alg",
        "//heyp/proto:constructors",
        "//heyp/proto:heyp_cc_proto",
        "//heyp/threads:mutex-helpers",
        "//heyp/threads:par-indexed-map",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "agg-marker",
    hdrs = ["agg-marker.h"],
    deps = ["//heyp/proto:heyp_cc_proto"],
)

cc_library(
    name = "dc-mapper",
    srcs = ["dc-mapper.cc"],
    hdrs = ["dc-mapper.h"],
    deps = [
        "//heyp/log:spdlog",
        "//heyp/proto:config_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "map",
    hdrs = ["map.h"],
    deps = [
        "//heyp/proto:alg",
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

cc_library(
    name = "state",
    srcs = ["state.cc"],
    hdrs = ["state.h"],
    deps = [
        "//heyp/alg:demand-predictor",
        "//heyp/log:spdlog",
        "//heyp/proto:heyp_cc_proto",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
    ],
)

cc_test(
    name = "aggregator-test",
    srcs = ["aggregator-test.cc"],
    deps = [
        ":aggregator",
        "//heyp/init:test-main",
        "//heyp/proto:parse-text",
    ],
)

cc_test(
    name = "dc-mapper-test",
    srcs = ["dc-mapper-test.cc"],
    deps = [
        ":dc-mapper",
        "//heyp/init:test-main",
        "//heyp/proto:parse-text",
    ],
)

cc_test(
    name = "state-test",
    srcs = ["state-test.cc"],
    deps = [
        ":state",
        "//heyp/init:test-main",
        "//heyp/proto:constructors",
        "@com_google_absl//absl/random",
    ],
)
