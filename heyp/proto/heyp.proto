syntax = "proto3";

package heyp.proto;

option go_package = "github.com/uluyol/heyp-agents/go/proto";

import "google/protobuf/timestamp.proto";

enum Protocol { UNSET = 0; TCP = 1; UDP = 2; }

message FlowMarker {
  string src_dc = 1;
  string dst_dc = 2;
  fixed64 host_id = 3;
  string src_addr = 4;
  string dst_addr = 5;
  Protocol protocol = 6;
  int32 src_port = 7;
  int32 dst_port = 8;
  uint64 seqnum = 9;  // seq number to distinguish flows with same ports
}

message FlowInfo {
  FlowMarker flow = 1;
  int64 predicted_demand_bps = 2;
  int64 ewma_usage_bps = 3;

  // cum_usage_bytes = cum_hipri_usage_bytes + cum_lopri_usage_bytes
  int64 cum_usage_bytes = 4;
  int64 cum_hipri_usage_bytes = 5;
  int64 cum_lopri_usage_bytes = 6;

  // currently_lopri indiciates whether a flow is exclusively using LOPRI
  // bandwidth.
  bool currently_lopri = 7;
}

message AggInfo {
  FlowInfo parent = 1;
  repeated FlowInfo children = 2;
}

message InfoBundle {
  FlowMarker bundler = 1;
  google.protobuf.Timestamp timestamp = 3;
  repeated FlowInfo flow_infos = 2;
}

message FlowAlloc {
  FlowMarker flow = 1;
  int64 hipri_rate_limit_bps = 2;
  int64 lopri_rate_limit_bps = 3;
}

message AllocBundle { repeated FlowAlloc flow_allocs = 1; }

message DebugAllocRecord {
  string timestamp = 1;
  AggInfo info = 2;
  repeated FlowAlloc flow_allocs = 3;
}

message DCMapping {
  message Entry {
    string host_addr = 1;
    string dc = 2;
  }
  repeated Entry entries = 1;
}

service ClusterAgent {
  rpc RegisterHost(stream InfoBundle) returns(stream AllocBundle) {}
}
