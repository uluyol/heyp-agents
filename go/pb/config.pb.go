// This file contains definitions of all configuration protos.
// These messages should only be stored in textual or in-memory form (i.e. not
// the binary format), so feed free to change any field numbers.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: heyp/proto/config.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetemDelayDist int32

const (
	NetemDelayDist_NETEM_NO_DIST      NetemDelayDist = 0
	NetemDelayDist_NETEM_NORMAL       NetemDelayDist = 1
	NetemDelayDist_NETEM_UNIFORM      NetemDelayDist = 2
	NetemDelayDist_NETEM_PARETO       NetemDelayDist = 3
	NetemDelayDist_NETEM_PARETONORMAL NetemDelayDist = 4
)

// Enum value maps for NetemDelayDist.
var (
	NetemDelayDist_name = map[int32]string{
		0: "NETEM_NO_DIST",
		1: "NETEM_NORMAL",
		2: "NETEM_UNIFORM",
		3: "NETEM_PARETO",
		4: "NETEM_PARETONORMAL",
	}
	NetemDelayDist_value = map[string]int32{
		"NETEM_NO_DIST":      0,
		"NETEM_NORMAL":       1,
		"NETEM_UNIFORM":      2,
		"NETEM_PARETO":       3,
		"NETEM_PARETONORMAL": 4,
	}
)

func (x NetemDelayDist) Enum() *NetemDelayDist {
	p := new(NetemDelayDist)
	*p = x
	return p
}

func (x NetemDelayDist) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetemDelayDist) Descriptor() protoreflect.EnumDescriptor {
	return file_heyp_proto_config_proto_enumTypes[0].Descriptor()
}

func (NetemDelayDist) Type() protoreflect.EnumType {
	return &file_heyp_proto_config_proto_enumTypes[0]
}

func (x NetemDelayDist) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NetemDelayDist) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NetemDelayDist(num)
	return nil
}

// Deprecated: Use NetemDelayDist.Descriptor instead.
func (NetemDelayDist) EnumDescriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{0}
}

type ClusterAllocatorType int32

const (
	ClusterAllocatorType_CA_BWE              ClusterAllocatorType = 0
	ClusterAllocatorType_CA_HEYP_SIGCOMM20   ClusterAllocatorType = 1
	ClusterAllocatorType_CA_SIMPLE_DOWNGRADE ClusterAllocatorType = 2
)

// Enum value maps for ClusterAllocatorType.
var (
	ClusterAllocatorType_name = map[int32]string{
		0: "CA_BWE",
		1: "CA_HEYP_SIGCOMM20",
		2: "CA_SIMPLE_DOWNGRADE",
	}
	ClusterAllocatorType_value = map[string]int32{
		"CA_BWE":              0,
		"CA_HEYP_SIGCOMM20":   1,
		"CA_SIMPLE_DOWNGRADE": 2,
	}
)

func (x ClusterAllocatorType) Enum() *ClusterAllocatorType {
	p := new(ClusterAllocatorType)
	*p = x
	return p
}

func (x ClusterAllocatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterAllocatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_heyp_proto_config_proto_enumTypes[1].Descriptor()
}

func (ClusterAllocatorType) Type() protoreflect.EnumType {
	return &file_heyp_proto_config_proto_enumTypes[1]
}

func (x ClusterAllocatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClusterAllocatorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClusterAllocatorType(num)
	return nil
}

// Deprecated: Use ClusterAllocatorType.Descriptor instead.
func (ClusterAllocatorType) EnumDescriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{1}
}

type DowngradeSelectorType int32

const (
	DowngradeSelectorType_DS_HEYP_SIGCOMM20  DowngradeSelectorType = 0
	DowngradeSelectorType_DS_KNAPSACK_SOLVER DowngradeSelectorType = 1
	DowngradeSelectorType_DS_LARGEST_FIRST   DowngradeSelectorType = 2
)

// Enum value maps for DowngradeSelectorType.
var (
	DowngradeSelectorType_name = map[int32]string{
		0: "DS_HEYP_SIGCOMM20",
		1: "DS_KNAPSACK_SOLVER",
		2: "DS_LARGEST_FIRST",
	}
	DowngradeSelectorType_value = map[string]int32{
		"DS_HEYP_SIGCOMM20":  0,
		"DS_KNAPSACK_SOLVER": 1,
		"DS_LARGEST_FIRST":   2,
	}
)

func (x DowngradeSelectorType) Enum() *DowngradeSelectorType {
	p := new(DowngradeSelectorType)
	*p = x
	return p
}

func (x DowngradeSelectorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DowngradeSelectorType) Descriptor() protoreflect.EnumDescriptor {
	return file_heyp_proto_config_proto_enumTypes[2].Descriptor()
}

func (DowngradeSelectorType) Type() protoreflect.EnumType {
	return &file_heyp_proto_config_proto_enumTypes[2]
}

func (x DowngradeSelectorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DowngradeSelectorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DowngradeSelectorType(num)
	return nil
}

// Deprecated: Use DowngradeSelectorType.Descriptor instead.
func (DowngradeSelectorType) EnumDescriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{2}
}

type DemandPredictorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeWindowDur   *string  `protobuf:"bytes,1,opt,name=time_window_dur,json=timeWindowDur,def=10s" json:"time_window_dur,omitempty"`
	UsageMultiplier *float64 `protobuf:"fixed64,2,opt,name=usage_multiplier,json=usageMultiplier,def=1.1" json:"usage_multiplier,omitempty"`
	MinDemandBps    *int64   `protobuf:"varint,3,opt,name=min_demand_bps,json=minDemandBps,def=5242880" json:"min_demand_bps,omitempty"`
}

// Default values for DemandPredictorConfig fields.
const (
	Default_DemandPredictorConfig_TimeWindowDur   = string("10s")
	Default_DemandPredictorConfig_UsageMultiplier = float64(1.1)
	Default_DemandPredictorConfig_MinDemandBps    = int64(5242880)
)

func (x *DemandPredictorConfig) Reset() {
	*x = DemandPredictorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemandPredictorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemandPredictorConfig) ProtoMessage() {}

func (x *DemandPredictorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemandPredictorConfig.ProtoReflect.Descriptor instead.
func (*DemandPredictorConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{0}
}

func (x *DemandPredictorConfig) GetTimeWindowDur() string {
	if x != nil && x.TimeWindowDur != nil {
		return *x.TimeWindowDur
	}
	return Default_DemandPredictorConfig_TimeWindowDur
}

func (x *DemandPredictorConfig) GetUsageMultiplier() float64 {
	if x != nil && x.UsageMultiplier != nil {
		return *x.UsageMultiplier
	}
	return Default_DemandPredictorConfig_UsageMultiplier
}

func (x *DemandPredictorConfig) GetMinDemandBps() int64 {
	if x != nil && x.MinDemandBps != nil {
		return *x.MinDemandBps
	}
	return Default_DemandPredictorConfig_MinDemandBps
}

type HostFlowTrackerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DemandPredictor          *DemandPredictorConfig `protobuf:"bytes,1,opt,name=demand_predictor,json=demandPredictor" json:"demand_predictor,omitempty"`
	IgnoreInstantaneousUsage *bool                  `protobuf:"varint,2,opt,name=ignore_instantaneous_usage,json=ignoreInstantaneousUsage,def=1" json:"ignore_instantaneous_usage,omitempty"`
}

// Default values for HostFlowTrackerConfig fields.
const (
	Default_HostFlowTrackerConfig_IgnoreInstantaneousUsage = bool(true)
)

func (x *HostFlowTrackerConfig) Reset() {
	*x = HostFlowTrackerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostFlowTrackerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostFlowTrackerConfig) ProtoMessage() {}

func (x *HostFlowTrackerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostFlowTrackerConfig.ProtoReflect.Descriptor instead.
func (*HostFlowTrackerConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{1}
}

func (x *HostFlowTrackerConfig) GetDemandPredictor() *DemandPredictorConfig {
	if x != nil {
		return x.DemandPredictor
	}
	return nil
}

func (x *HostFlowTrackerConfig) GetIgnoreInstantaneousUsage() bool {
	if x != nil && x.IgnoreInstantaneousUsage != nil {
		return *x.IgnoreInstantaneousUsage
	}
	return Default_HostFlowTrackerConfig_IgnoreInstantaneousUsage
}

type FlowAggregatorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DemandPredictor *DemandPredictorConfig `protobuf:"bytes,1,opt,name=demand_predictor,json=demandPredictor" json:"demand_predictor,omitempty"`
}

func (x *FlowAggregatorConfig) Reset() {
	*x = FlowAggregatorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowAggregatorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowAggregatorConfig) ProtoMessage() {}

func (x *FlowAggregatorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowAggregatorConfig.ProtoReflect.Descriptor instead.
func (*FlowAggregatorConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{2}
}

func (x *FlowAggregatorConfig) GetDemandPredictor() *DemandPredictorConfig {
	if x != nil {
		return x.DemandPredictor
	}
	return nil
}

type HostFlowStateReporterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsBinaryName *string `protobuf:"bytes,1,opt,name=ss_binary_name,json=ssBinaryName,def=ss" json:"ss_binary_name,omitempty"`
}

// Default values for HostFlowStateReporterConfig fields.
const (
	Default_HostFlowStateReporterConfig_SsBinaryName = string("ss")
)

func (x *HostFlowStateReporterConfig) Reset() {
	*x = HostFlowStateReporterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostFlowStateReporterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostFlowStateReporterConfig) ProtoMessage() {}

func (x *HostFlowStateReporterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostFlowStateReporterConfig.ProtoReflect.Descriptor instead.
func (*HostFlowStateReporterConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{3}
}

func (x *HostFlowStateReporterConfig) GetSsBinaryName() string {
	if x != nil && x.SsBinaryName != nil {
		return *x.SsBinaryName
	}
	return Default_HostFlowStateReporterConfig_SsBinaryName
}

type HostEnforcerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If specified, will periodically dump iptables and tc state here.
	DebugLogDir      *string `protobuf:"bytes,1,opt,name=debug_log_dir,json=debugLogDir" json:"debug_log_dir,omitempty"`
	LimitHipri       *bool   `protobuf:"varint,2,opt,name=limit_hipri,json=limitHipri,def=1" json:"limit_hipri,omitempty"`
	LimitLopri       *bool   `protobuf:"varint,3,opt,name=limit_lopri,json=limitLopri,def=1" json:"limit_lopri,omitempty"`
	PacingBurstBytes *int64  `protobuf:"varint,4,opt,name=pacing_burst_bytes,json=pacingBurstBytes" json:"pacing_burst_bytes,omitempty"`
	// HostEnforcer will never drop rate limits below min_rate_limit_bps.
	MinRateLimitBps *int64 `protobuf:"varint,5,opt,name=min_rate_limit_bps,json=minRateLimitBps,def=5242880" json:"min_rate_limit_bps,omitempty"`
}

// Default values for HostEnforcerConfig fields.
const (
	Default_HostEnforcerConfig_LimitHipri      = bool(true)
	Default_HostEnforcerConfig_LimitLopri      = bool(true)
	Default_HostEnforcerConfig_MinRateLimitBps = int64(5242880)
)

func (x *HostEnforcerConfig) Reset() {
	*x = HostEnforcerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostEnforcerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostEnforcerConfig) ProtoMessage() {}

func (x *HostEnforcerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostEnforcerConfig.ProtoReflect.Descriptor instead.
func (*HostEnforcerConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{4}
}

func (x *HostEnforcerConfig) GetDebugLogDir() string {
	if x != nil && x.DebugLogDir != nil {
		return *x.DebugLogDir
	}
	return ""
}

func (x *HostEnforcerConfig) GetLimitHipri() bool {
	if x != nil && x.LimitHipri != nil {
		return *x.LimitHipri
	}
	return Default_HostEnforcerConfig_LimitHipri
}

func (x *HostEnforcerConfig) GetLimitLopri() bool {
	if x != nil && x.LimitLopri != nil {
		return *x.LimitLopri
	}
	return Default_HostEnforcerConfig_LimitLopri
}

func (x *HostEnforcerConfig) GetPacingBurstBytes() int64 {
	if x != nil && x.PacingBurstBytes != nil {
		return *x.PacingBurstBytes
	}
	return 0
}

func (x *HostEnforcerConfig) GetMinRateLimitBps() int64 {
	if x != nil && x.MinRateLimitBps != nil {
		return *x.MinRateLimitBps
	}
	return Default_HostEnforcerConfig_MinRateLimitBps
}

type HostDaemonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectStatsPeriod               *string `protobuf:"bytes,1,opt,name=collect_stats_period,json=collectStatsPeriod,def=500ms" json:"collect_stats_period,omitempty"`
	InformPeriodDur                  *string `protobuf:"bytes,2,opt,name=inform_period_dur,json=informPeriodDur,def=2s" json:"inform_period_dur,omitempty"`
	ClusterAgentAddr                 *string `protobuf:"bytes,3,opt,name=cluster_agent_addr,json=clusterAgentAddr" json:"cluster_agent_addr,omitempty"`
	ClusterAgentConnectionTimeoutDur *string `protobuf:"bytes,4,opt,name=cluster_agent_connection_timeout_dur,json=clusterAgentConnectionTimeoutDur,def=10s" json:"cluster_agent_connection_timeout_dur,omitempty"`
	StatsLogFile                     *string `protobuf:"bytes,5,opt,name=stats_log_file,json=statsLogFile" json:"stats_log_file,omitempty"` // if non-empty, will log here once per collect_stats_period
}

// Default values for HostDaemonConfig fields.
const (
	Default_HostDaemonConfig_CollectStatsPeriod               = string("500ms")
	Default_HostDaemonConfig_InformPeriodDur                  = string("2s")
	Default_HostDaemonConfig_ClusterAgentConnectionTimeoutDur = string("10s")
)

func (x *HostDaemonConfig) Reset() {
	*x = HostDaemonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostDaemonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostDaemonConfig) ProtoMessage() {}

func (x *HostDaemonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostDaemonConfig.ProtoReflect.Descriptor instead.
func (*HostDaemonConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{5}
}

func (x *HostDaemonConfig) GetCollectStatsPeriod() string {
	if x != nil && x.CollectStatsPeriod != nil {
		return *x.CollectStatsPeriod
	}
	return Default_HostDaemonConfig_CollectStatsPeriod
}

func (x *HostDaemonConfig) GetInformPeriodDur() string {
	if x != nil && x.InformPeriodDur != nil {
		return *x.InformPeriodDur
	}
	return Default_HostDaemonConfig_InformPeriodDur
}

func (x *HostDaemonConfig) GetClusterAgentAddr() string {
	if x != nil && x.ClusterAgentAddr != nil {
		return *x.ClusterAgentAddr
	}
	return ""
}

func (x *HostDaemonConfig) GetClusterAgentConnectionTimeoutDur() string {
	if x != nil && x.ClusterAgentConnectionTimeoutDur != nil {
		return *x.ClusterAgentConnectionTimeoutDur
	}
	return Default_HostDaemonConfig_ClusterAgentConnectionTimeoutDur
}

func (x *HostDaemonConfig) GetStatsLogFile() string {
	if x != nil && x.StatsLogFile != nil {
		return *x.StatsLogFile
	}
	return ""
}

type DCMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*DCMapping_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *DCMapping) Reset() {
	*x = DCMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DCMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DCMapping) ProtoMessage() {}

func (x *DCMapping) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DCMapping.ProtoReflect.Descriptor instead.
func (*DCMapping) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{6}
}

func (x *DCMapping) GetEntries() []*DCMapping_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type StaticDCMapperConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping *DCMapping `protobuf:"bytes,1,opt,name=mapping" json:"mapping,omitempty"`
}

func (x *StaticDCMapperConfig) Reset() {
	*x = StaticDCMapperConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticDCMapperConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticDCMapperConfig) ProtoMessage() {}

func (x *StaticDCMapperConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticDCMapperConfig.ProtoReflect.Descriptor instead.
func (*StaticDCMapperConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{7}
}

func (x *StaticDCMapperConfig) GetMapping() *DCMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type NetemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayMs             *int32          `protobuf:"varint,1,opt,name=delay_ms,json=delayMs" json:"delay_ms,omitempty"`
	DelayJitterMs       *int32          `protobuf:"varint,2,opt,name=delay_jitter_ms,json=delayJitterMs" json:"delay_jitter_ms,omitempty"`
	DelayCorrelationPct *float64        `protobuf:"fixed64,3,opt,name=delay_correlation_pct,json=delayCorrelationPct" json:"delay_correlation_pct,omitempty"`
	DelayDist           *NetemDelayDist `protobuf:"varint,4,opt,name=delay_dist,json=delayDist,enum=heyp.proto.NetemDelayDist,def=1" json:"delay_dist,omitempty"`
}

// Default values for NetemConfig fields.
const (
	Default_NetemConfig_DelayDist = NetemDelayDist_NETEM_NORMAL
)

func (x *NetemConfig) Reset() {
	*x = NetemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetemConfig) ProtoMessage() {}

func (x *NetemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetemConfig.ProtoReflect.Descriptor instead.
func (*NetemConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{8}
}

func (x *NetemConfig) GetDelayMs() int32 {
	if x != nil && x.DelayMs != nil {
		return *x.DelayMs
	}
	return 0
}

func (x *NetemConfig) GetDelayJitterMs() int32 {
	if x != nil && x.DelayJitterMs != nil {
		return *x.DelayJitterMs
	}
	return 0
}

func (x *NetemConfig) GetDelayCorrelationPct() float64 {
	if x != nil && x.DelayCorrelationPct != nil {
		return *x.DelayCorrelationPct
	}
	return 0
}

func (x *NetemConfig) GetDelayDist() NetemDelayDist {
	if x != nil && x.DelayDist != nil {
		return *x.DelayDist
	}
	return Default_NetemConfig_DelayDist
}

type SimulatedWanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DcPairs []*SimulatedWanConfig_Pair `protobuf:"bytes,1,rep,name=dc_pairs,json=dcPairs" json:"dc_pairs,omitempty"`
}

func (x *SimulatedWanConfig) Reset() {
	*x = SimulatedWanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulatedWanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulatedWanConfig) ProtoMessage() {}

func (x *SimulatedWanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulatedWanConfig.ProtoReflect.Descriptor instead.
func (*SimulatedWanConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{9}
}

func (x *SimulatedWanConfig) GetDcPairs() []*SimulatedWanConfig_Pair {
	if x != nil {
		return x.DcPairs
	}
	return nil
}

type HostAgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThisHostAddrs          []string                     `protobuf:"bytes,1,rep,name=this_host_addrs,json=thisHostAddrs" json:"this_host_addrs,omitempty"`
	FlowTracker            *HostFlowTrackerConfig       `protobuf:"bytes,2,opt,name=flow_tracker,json=flowTracker" json:"flow_tracker,omitempty"`
	SocketToHostAggregator *FlowAggregatorConfig        `protobuf:"bytes,3,opt,name=socket_to_host_aggregator,json=socketToHostAggregator" json:"socket_to_host_aggregator,omitempty"`
	FlowStateReporter      *HostFlowStateReporterConfig `protobuf:"bytes,4,opt,name=flow_state_reporter,json=flowStateReporter" json:"flow_state_reporter,omitempty"`
	Enforcer               *HostEnforcerConfig          `protobuf:"bytes,5,opt,name=enforcer" json:"enforcer,omitempty"`
	Daemon                 *HostDaemonConfig            `protobuf:"bytes,6,opt,name=daemon" json:"daemon,omitempty"`
	DcMapper               *StaticDCMapperConfig        `protobuf:"bytes,7,opt,name=dc_mapper,json=dcMapper" json:"dc_mapper,omitempty"`
	SimulatedWan           *SimulatedWanConfig          `protobuf:"bytes,8,opt,name=simulated_wan,json=simulatedWan" json:"simulated_wan,omitempty"`
}

func (x *HostAgentConfig) Reset() {
	*x = HostAgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostAgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAgentConfig) ProtoMessage() {}

func (x *HostAgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAgentConfig.ProtoReflect.Descriptor instead.
func (*HostAgentConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{10}
}

func (x *HostAgentConfig) GetThisHostAddrs() []string {
	if x != nil {
		return x.ThisHostAddrs
	}
	return nil
}

func (x *HostAgentConfig) GetFlowTracker() *HostFlowTrackerConfig {
	if x != nil {
		return x.FlowTracker
	}
	return nil
}

func (x *HostAgentConfig) GetSocketToHostAggregator() *FlowAggregatorConfig {
	if x != nil {
		return x.SocketToHostAggregator
	}
	return nil
}

func (x *HostAgentConfig) GetFlowStateReporter() *HostFlowStateReporterConfig {
	if x != nil {
		return x.FlowStateReporter
	}
	return nil
}

func (x *HostAgentConfig) GetEnforcer() *HostEnforcerConfig {
	if x != nil {
		return x.Enforcer
	}
	return nil
}

func (x *HostAgentConfig) GetDaemon() *HostDaemonConfig {
	if x != nil {
		return x.Daemon
	}
	return nil
}

func (x *HostAgentConfig) GetDcMapper() *StaticDCMapperConfig {
	if x != nil {
		return x.DcMapper
	}
	return nil
}

func (x *HostAgentConfig) GetSimulatedWan() *SimulatedWanConfig {
	if x != nil {
		return x.SimulatedWan
	}
	return nil
}

type DowngradeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *DowngradeSelectorType `protobuf:"varint,1,opt,name=type,enum=heyp.proto.DowngradeSelectorType,def=0" json:"type,omitempty"`
}

// Default values for DowngradeSelector fields.
const (
	Default_DowngradeSelector_Type = DowngradeSelectorType_DS_HEYP_SIGCOMM20
)

func (x *DowngradeSelector) Reset() {
	*x = DowngradeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DowngradeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DowngradeSelector) ProtoMessage() {}

func (x *DowngradeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DowngradeSelector.ProtoReflect.Descriptor instead.
func (*DowngradeSelector) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{11}
}

func (x *DowngradeSelector) GetType() DowngradeSelectorType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_DowngradeSelector_Type
}

type ClusterAllocatorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                                         *ClusterAllocatorType `protobuf:"varint,1,opt,name=type,enum=heyp.proto.ClusterAllocatorType,def=0" json:"type,omitempty"`
	EnableBurstiness                             *bool                 `protobuf:"varint,2,opt,name=enable_burstiness,json=enableBurstiness,def=1" json:"enable_burstiness,omitempty"`
	EnableBonus                                  *bool                 `protobuf:"varint,3,opt,name=enable_bonus,json=enableBonus,def=1" json:"enable_bonus,omitempty"`
	OversubFactor                                *float64              `protobuf:"fixed64,4,opt,name=oversub_factor,json=oversubFactor,def=1.15" json:"oversub_factor,omitempty"`
	DowngradeSelector                            *DowngradeSelector    `protobuf:"bytes,5,opt,name=downgrade_selector,json=downgradeSelector" json:"downgrade_selector,omitempty"`
	HeypAcceptableMeasuredRatioOverIntendedRatio *float64              `protobuf:"fixed64,6,opt,name=heyp_acceptable_measured_ratio_over_intended_ratio,json=heypAcceptableMeasuredRatioOverIntendedRatio,def=0.9" json:"heyp_acceptable_measured_ratio_over_intended_ratio,omitempty"`
	HeypProbeLopriWhenAmbiguous                  *bool                 `protobuf:"varint,7,opt,name=heyp_probe_lopri_when_ambiguous,json=heypProbeLopriWhenAmbiguous,def=1" json:"heyp_probe_lopri_when_ambiguous,omitempty"`
}

// Default values for ClusterAllocatorConfig fields.
const (
	Default_ClusterAllocatorConfig_Type                                         = ClusterAllocatorType_CA_BWE
	Default_ClusterAllocatorConfig_EnableBurstiness                             = bool(true)
	Default_ClusterAllocatorConfig_EnableBonus                                  = bool(true)
	Default_ClusterAllocatorConfig_OversubFactor                                = float64(1.15)
	Default_ClusterAllocatorConfig_HeypAcceptableMeasuredRatioOverIntendedRatio = float64(0.9)
	Default_ClusterAllocatorConfig_HeypProbeLopriWhenAmbiguous                  = bool(true)
)

func (x *ClusterAllocatorConfig) Reset() {
	*x = ClusterAllocatorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAllocatorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAllocatorConfig) ProtoMessage() {}

func (x *ClusterAllocatorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAllocatorConfig.ProtoReflect.Descriptor instead.
func (*ClusterAllocatorConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{12}
}

func (x *ClusterAllocatorConfig) GetType() ClusterAllocatorType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ClusterAllocatorConfig_Type
}

func (x *ClusterAllocatorConfig) GetEnableBurstiness() bool {
	if x != nil && x.EnableBurstiness != nil {
		return *x.EnableBurstiness
	}
	return Default_ClusterAllocatorConfig_EnableBurstiness
}

func (x *ClusterAllocatorConfig) GetEnableBonus() bool {
	if x != nil && x.EnableBonus != nil {
		return *x.EnableBonus
	}
	return Default_ClusterAllocatorConfig_EnableBonus
}

func (x *ClusterAllocatorConfig) GetOversubFactor() float64 {
	if x != nil && x.OversubFactor != nil {
		return *x.OversubFactor
	}
	return Default_ClusterAllocatorConfig_OversubFactor
}

func (x *ClusterAllocatorConfig) GetDowngradeSelector() *DowngradeSelector {
	if x != nil {
		return x.DowngradeSelector
	}
	return nil
}

func (x *ClusterAllocatorConfig) GetHeypAcceptableMeasuredRatioOverIntendedRatio() float64 {
	if x != nil && x.HeypAcceptableMeasuredRatioOverIntendedRatio != nil {
		return *x.HeypAcceptableMeasuredRatioOverIntendedRatio
	}
	return Default_ClusterAllocatorConfig_HeypAcceptableMeasuredRatioOverIntendedRatio
}

func (x *ClusterAllocatorConfig) GetHeypProbeLopriWhenAmbiguous() bool {
	if x != nil && x.HeypProbeLopriWhenAmbiguous != nil {
		return *x.HeypProbeLopriWhenAmbiguous
	}
	return Default_ClusterAllocatorConfig_HeypProbeLopriWhenAmbiguous
}

type ClusterServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       *string `protobuf:"bytes,1,opt,name=address,def=0.0.0.0:1415" json:"address,omitempty"`
	ControlPeriod *string `protobuf:"bytes,2,opt,name=control_period,json=controlPeriod,def=5s" json:"control_period,omitempty"`
}

// Default values for ClusterServerConfig fields.
const (
	Default_ClusterServerConfig_Address       = string("0.0.0.0:1415")
	Default_ClusterServerConfig_ControlPeriod = string("5s")
)

func (x *ClusterServerConfig) Reset() {
	*x = ClusterServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServerConfig) ProtoMessage() {}

func (x *ClusterServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServerConfig.ProtoReflect.Descriptor instead.
func (*ClusterServerConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{13}
}

func (x *ClusterServerConfig) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return Default_ClusterServerConfig_Address
}

func (x *ClusterServerConfig) GetControlPeriod() string {
	if x != nil && x.ControlPeriod != nil {
		return *x.ControlPeriod
	}
	return Default_ClusterServerConfig_ControlPeriod
}

type ClusterAgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowAggregator *FlowAggregatorConfig   `protobuf:"bytes,1,opt,name=flow_aggregator,json=flowAggregator" json:"flow_aggregator,omitempty"`
	Allocator      *ClusterAllocatorConfig `protobuf:"bytes,2,opt,name=allocator" json:"allocator,omitempty"`
	Server         *ClusterServerConfig    `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
}

func (x *ClusterAgentConfig) Reset() {
	*x = ClusterAgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAgentConfig) ProtoMessage() {}

func (x *ClusterAgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAgentConfig.ProtoReflect.Descriptor instead.
func (*ClusterAgentConfig) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterAgentConfig) GetFlowAggregator() *FlowAggregatorConfig {
	if x != nil {
		return x.FlowAggregator
	}
	return nil
}

func (x *ClusterAgentConfig) GetAllocator() *ClusterAllocatorConfig {
	if x != nil {
		return x.Allocator
	}
	return nil
}

func (x *ClusterAgentConfig) GetServer() *ClusterServerConfig {
	if x != nil {
		return x.Server
	}
	return nil
}

type DCMapping_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostAddr *string `protobuf:"bytes,1,opt,name=host_addr,json=hostAddr" json:"host_addr,omitempty"`
	Dc       *string `protobuf:"bytes,2,opt,name=dc" json:"dc,omitempty"`
}

func (x *DCMapping_Entry) Reset() {
	*x = DCMapping_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DCMapping_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DCMapping_Entry) ProtoMessage() {}

func (x *DCMapping_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DCMapping_Entry.ProtoReflect.Descriptor instead.
func (*DCMapping_Entry) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DCMapping_Entry) GetHostAddr() string {
	if x != nil && x.HostAddr != nil {
		return *x.HostAddr
	}
	return ""
}

func (x *DCMapping_Entry) GetDc() string {
	if x != nil && x.Dc != nil {
		return *x.Dc
	}
	return ""
}

type SimulatedWanConfig_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcDc *string      `protobuf:"bytes,1,opt,name=src_dc,json=srcDc" json:"src_dc,omitempty"`
	DstDc *string      `protobuf:"bytes,2,opt,name=dst_dc,json=dstDc" json:"dst_dc,omitempty"`
	Netem *NetemConfig `protobuf:"bytes,3,opt,name=netem" json:"netem,omitempty"`
}

func (x *SimulatedWanConfig_Pair) Reset() {
	*x = SimulatedWanConfig_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulatedWanConfig_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulatedWanConfig_Pair) ProtoMessage() {}

func (x *SimulatedWanConfig_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulatedWanConfig_Pair.ProtoReflect.Descriptor instead.
func (*SimulatedWanConfig_Pair) Descriptor() ([]byte, []int) {
	return file_heyp_proto_config_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SimulatedWanConfig_Pair) GetSrcDc() string {
	if x != nil && x.SrcDc != nil {
		return *x.SrcDc
	}
	return ""
}

func (x *SimulatedWanConfig_Pair) GetDstDc() string {
	if x != nil && x.DstDc != nil {
		return *x.DstDc
	}
	return ""
}

func (x *SimulatedWanConfig_Pair) GetNetem() *NetemConfig {
	if x != nil {
		return x.Netem
	}
	return nil
}

var File_heyp_proto_config_proto protoreflect.FileDescriptor

var file_heyp_proto_config_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x65, 0x79, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x68, 0x65, 0x79, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2b, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x64,
	0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x31, 0x30, 0x73, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x0f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x3a, 0x07, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x30, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x70, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x15,
	0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x10, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x1a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x18, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f,
	0x75, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4c, 0x0a, 0x10, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x79, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x47, 0x0a,
	0x1b, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x0e,
	0x73, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x44, 0x69,
	0x72, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x69, 0x70, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x48, 0x69, 0x70, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6c, 0x6f, 0x70, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x70, 0x72, 0x69, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x42, 0x75, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x07, 0x35, 0x32, 0x34, 0x32, 0x38,
	0x38, 0x30, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x70, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x05, 0x35, 0x30, 0x30, 0x6d, 0x73, 0x52, 0x12, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2e, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x32, 0x73,
	0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x75,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x53, 0x0a, 0x24, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x31,
	0x30, 0x73, 0x52, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x44, 0x75, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x78, 0x0a, 0x09, 0x44, 0x43,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x34,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x64, 0x63, 0x22, 0x47, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x43,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x43, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xcd, 0x01,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x44, 0x69, 0x73, 0x74, 0x3a, 0x0c, 0x4e, 0x45, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x74, 0x22, 0xb9, 0x01,
	0x0a, 0x12, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x63, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x64, 0x63, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x1a, 0x63, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x72, 0x63, 0x5f, 0x64, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72,
	0x63, 0x44, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x64, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x44, 0x63, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x65,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x79, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x65, 0x6d, 0x22, 0xab, 0x04, 0x0a, 0x0f, 0x48, 0x6f,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65,
	0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x19, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x16, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x64, 0x63, 0x4d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x77, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x79, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x57, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x6e, 0x22, 0x5d, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x79,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x44,
	0x53, 0x5f, 0x48, 0x45, 0x59, 0x50, 0x5f, 0x53, 0x49, 0x47, 0x43, 0x4f, 0x4d, 0x4d, 0x32, 0x30,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x03, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x06, 0x43, 0x41, 0x5f, 0x42, 0x57, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x3a, 0x04, 0x31, 0x2e, 0x31, 0x35, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x75, 0x62, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6d, 0x0a, 0x32, 0x68, 0x65, 0x79, 0x70, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e, 0x39, 0x52, 0x2c, 0x68, 0x65, 0x79, 0x70, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x4a, 0x0a, 0x1f, 0x68, 0x65, 0x79, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x6c, 0x6f, 0x70, 0x72, 0x69, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x61,
	0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x1b, 0x68, 0x65, 0x79, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4c,
	0x6f, 0x70, 0x72, 0x69, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f, 0x75,
	0x73, 0x22, 0x68, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x0c, 0x30, 0x2e, 0x30, 0x2e, 0x30,
	0x2e, 0x30, 0x3a, 0x31, 0x34, 0x31, 0x35, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x35, 0x73, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x12,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x49, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65,
	0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a,
	0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x72, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45,
	0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x45, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x45,
	0x54, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41,
	0x52, 0x45, 0x54, 0x4f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x14,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x5f, 0x42, 0x57, 0x45, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x5f, 0x48, 0x45, 0x59, 0x50, 0x5f, 0x53, 0x49, 0x47, 0x43,
	0x4f, 0x4d, 0x4d, 0x32, 0x30, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x5f, 0x53, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02,
	0x2a, 0x5c, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x53, 0x5f,
	0x48, 0x45, 0x59, 0x50, 0x5f, 0x53, 0x49, 0x47, 0x43, 0x4f, 0x4d, 0x4d, 0x32, 0x30, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x53, 0x5f, 0x4b, 0x4e, 0x41, 0x50, 0x53, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x53, 0x5f, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x42, 0x25,
	0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6c, 0x75,
	0x79, 0x6f, 0x6c, 0x2f, 0x68, 0x65, 0x79, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x62,
}

var (
	file_heyp_proto_config_proto_rawDescOnce sync.Once
	file_heyp_proto_config_proto_rawDescData = file_heyp_proto_config_proto_rawDesc
)

func file_heyp_proto_config_proto_rawDescGZIP() []byte {
	file_heyp_proto_config_proto_rawDescOnce.Do(func() {
		file_heyp_proto_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_heyp_proto_config_proto_rawDescData)
	})
	return file_heyp_proto_config_proto_rawDescData
}

var file_heyp_proto_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_heyp_proto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_heyp_proto_config_proto_goTypes = []interface{}{
	(NetemDelayDist)(0),                 // 0: heyp.proto.NetemDelayDist
	(ClusterAllocatorType)(0),           // 1: heyp.proto.ClusterAllocatorType
	(DowngradeSelectorType)(0),          // 2: heyp.proto.DowngradeSelectorType
	(*DemandPredictorConfig)(nil),       // 3: heyp.proto.DemandPredictorConfig
	(*HostFlowTrackerConfig)(nil),       // 4: heyp.proto.HostFlowTrackerConfig
	(*FlowAggregatorConfig)(nil),        // 5: heyp.proto.FlowAggregatorConfig
	(*HostFlowStateReporterConfig)(nil), // 6: heyp.proto.HostFlowStateReporterConfig
	(*HostEnforcerConfig)(nil),          // 7: heyp.proto.HostEnforcerConfig
	(*HostDaemonConfig)(nil),            // 8: heyp.proto.HostDaemonConfig
	(*DCMapping)(nil),                   // 9: heyp.proto.DCMapping
	(*StaticDCMapperConfig)(nil),        // 10: heyp.proto.StaticDCMapperConfig
	(*NetemConfig)(nil),                 // 11: heyp.proto.NetemConfig
	(*SimulatedWanConfig)(nil),          // 12: heyp.proto.SimulatedWanConfig
	(*HostAgentConfig)(nil),             // 13: heyp.proto.HostAgentConfig
	(*DowngradeSelector)(nil),           // 14: heyp.proto.DowngradeSelector
	(*ClusterAllocatorConfig)(nil),      // 15: heyp.proto.ClusterAllocatorConfig
	(*ClusterServerConfig)(nil),         // 16: heyp.proto.ClusterServerConfig
	(*ClusterAgentConfig)(nil),          // 17: heyp.proto.ClusterAgentConfig
	(*DCMapping_Entry)(nil),             // 18: heyp.proto.DCMapping.Entry
	(*SimulatedWanConfig_Pair)(nil),     // 19: heyp.proto.SimulatedWanConfig.Pair
}
var file_heyp_proto_config_proto_depIdxs = []int32{
	3,  // 0: heyp.proto.HostFlowTrackerConfig.demand_predictor:type_name -> heyp.proto.DemandPredictorConfig
	3,  // 1: heyp.proto.FlowAggregatorConfig.demand_predictor:type_name -> heyp.proto.DemandPredictorConfig
	18, // 2: heyp.proto.DCMapping.entries:type_name -> heyp.proto.DCMapping.Entry
	9,  // 3: heyp.proto.StaticDCMapperConfig.mapping:type_name -> heyp.proto.DCMapping
	0,  // 4: heyp.proto.NetemConfig.delay_dist:type_name -> heyp.proto.NetemDelayDist
	19, // 5: heyp.proto.SimulatedWanConfig.dc_pairs:type_name -> heyp.proto.SimulatedWanConfig.Pair
	4,  // 6: heyp.proto.HostAgentConfig.flow_tracker:type_name -> heyp.proto.HostFlowTrackerConfig
	5,  // 7: heyp.proto.HostAgentConfig.socket_to_host_aggregator:type_name -> heyp.proto.FlowAggregatorConfig
	6,  // 8: heyp.proto.HostAgentConfig.flow_state_reporter:type_name -> heyp.proto.HostFlowStateReporterConfig
	7,  // 9: heyp.proto.HostAgentConfig.enforcer:type_name -> heyp.proto.HostEnforcerConfig
	8,  // 10: heyp.proto.HostAgentConfig.daemon:type_name -> heyp.proto.HostDaemonConfig
	10, // 11: heyp.proto.HostAgentConfig.dc_mapper:type_name -> heyp.proto.StaticDCMapperConfig
	12, // 12: heyp.proto.HostAgentConfig.simulated_wan:type_name -> heyp.proto.SimulatedWanConfig
	2,  // 13: heyp.proto.DowngradeSelector.type:type_name -> heyp.proto.DowngradeSelectorType
	1,  // 14: heyp.proto.ClusterAllocatorConfig.type:type_name -> heyp.proto.ClusterAllocatorType
	14, // 15: heyp.proto.ClusterAllocatorConfig.downgrade_selector:type_name -> heyp.proto.DowngradeSelector
	5,  // 16: heyp.proto.ClusterAgentConfig.flow_aggregator:type_name -> heyp.proto.FlowAggregatorConfig
	15, // 17: heyp.proto.ClusterAgentConfig.allocator:type_name -> heyp.proto.ClusterAllocatorConfig
	16, // 18: heyp.proto.ClusterAgentConfig.server:type_name -> heyp.proto.ClusterServerConfig
	11, // 19: heyp.proto.SimulatedWanConfig.Pair.netem:type_name -> heyp.proto.NetemConfig
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_heyp_proto_config_proto_init() }
func file_heyp_proto_config_proto_init() {
	if File_heyp_proto_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_heyp_proto_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemandPredictorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostFlowTrackerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowAggregatorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostFlowStateReporterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostEnforcerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostDaemonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DCMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticDCMapperConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulatedWanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostAgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DowngradeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAllocatorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DCMapping_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulatedWanConfig_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heyp_proto_config_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_heyp_proto_config_proto_goTypes,
		DependencyIndexes: file_heyp_proto_config_proto_depIdxs,
		EnumInfos:         file_heyp_proto_config_proto_enumTypes,
		MessageInfos:      file_heyp_proto_config_proto_msgTypes,
	}.Build()
	File_heyp_proto_config_proto = out.File
	file_heyp_proto_config_proto_rawDesc = nil
	file_heyp_proto_config_proto_goTypes = nil
	file_heyp_proto_config_proto_depIdxs = nil
}
