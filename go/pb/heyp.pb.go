// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: heyp/proto/heyp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Protocol int32

const (
	Protocol_UNSET Protocol = 0
	Protocol_TCP   Protocol = 1
	Protocol_UDP   Protocol = 2
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "UNSET",
		1: "TCP",
		2: "UDP",
	}
	Protocol_value = map[string]int32{
		"UNSET": 0,
		"TCP":   1,
		"UDP":   2,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_heyp_proto_heyp_proto_enumTypes[0].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_heyp_proto_heyp_proto_enumTypes[0]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{0}
}

type FlowMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcDc    string   `protobuf:"bytes,1,opt,name=src_dc,json=srcDc,proto3" json:"src_dc,omitempty"`
	DstDc    string   `protobuf:"bytes,2,opt,name=dst_dc,json=dstDc,proto3" json:"dst_dc,omitempty"`
	Job      string   `protobuf:"bytes,10,opt,name=job,proto3" json:"job,omitempty"`
	HostId   uint64   `protobuf:"fixed64,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	SrcAddr  string   `protobuf:"bytes,4,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DstAddr  string   `protobuf:"bytes,5,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	Protocol Protocol `protobuf:"varint,6,opt,name=protocol,proto3,enum=heyp.proto.Protocol" json:"protocol,omitempty"`
	SrcPort  int32    `protobuf:"varint,7,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort  int32    `protobuf:"varint,8,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Seqnum   uint64   `protobuf:"varint,9,opt,name=seqnum,proto3" json:"seqnum,omitempty"` // seq number to distinguish flows with same ports
}

func (x *FlowMarker) Reset() {
	*x = FlowMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMarker) ProtoMessage() {}

func (x *FlowMarker) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMarker.ProtoReflect.Descriptor instead.
func (*FlowMarker) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{0}
}

func (x *FlowMarker) GetSrcDc() string {
	if x != nil {
		return x.SrcDc
	}
	return ""
}

func (x *FlowMarker) GetDstDc() string {
	if x != nil {
		return x.DstDc
	}
	return ""
}

func (x *FlowMarker) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *FlowMarker) GetHostId() uint64 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *FlowMarker) GetSrcAddr() string {
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *FlowMarker) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

func (x *FlowMarker) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_UNSET
}

func (x *FlowMarker) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *FlowMarker) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *FlowMarker) GetSeqnum() uint64 {
	if x != nil {
		return x.Seqnum
	}
	return 0
}

type FlowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow               *FlowMarker `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	PredictedDemandBps int64       `protobuf:"varint,2,opt,name=predicted_demand_bps,json=predictedDemandBps,proto3" json:"predicted_demand_bps,omitempty"`
	EwmaUsageBps       int64       `protobuf:"varint,3,opt,name=ewma_usage_bps,json=ewmaUsageBps,proto3" json:"ewma_usage_bps,omitempty"`
	// cum_usage_bytes = cum_hipri_usage_bytes + cum_lopri_usage_bytes
	CumUsageBytes      int64 `protobuf:"varint,4,opt,name=cum_usage_bytes,json=cumUsageBytes,proto3" json:"cum_usage_bytes,omitempty"`
	CumHipriUsageBytes int64 `protobuf:"varint,5,opt,name=cum_hipri_usage_bytes,json=cumHipriUsageBytes,proto3" json:"cum_hipri_usage_bytes,omitempty"`
	CumLopriUsageBytes int64 `protobuf:"varint,6,opt,name=cum_lopri_usage_bytes,json=cumLopriUsageBytes,proto3" json:"cum_lopri_usage_bytes,omitempty"`
	// currently_lopri indiciates whether a flow is exclusively using LOPRI
	// bandwidth.
	CurrentlyLopri bool `protobuf:"varint,7,opt,name=currently_lopri,json=currentlyLopri,proto3" json:"currently_lopri,omitempty"`
}

func (x *FlowInfo) Reset() {
	*x = FlowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInfo) ProtoMessage() {}

func (x *FlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInfo.ProtoReflect.Descriptor instead.
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{1}
}

func (x *FlowInfo) GetFlow() *FlowMarker {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowInfo) GetPredictedDemandBps() int64 {
	if x != nil {
		return x.PredictedDemandBps
	}
	return 0
}

func (x *FlowInfo) GetEwmaUsageBps() int64 {
	if x != nil {
		return x.EwmaUsageBps
	}
	return 0
}

func (x *FlowInfo) GetCumUsageBytes() int64 {
	if x != nil {
		return x.CumUsageBytes
	}
	return 0
}

func (x *FlowInfo) GetCumHipriUsageBytes() int64 {
	if x != nil {
		return x.CumHipriUsageBytes
	}
	return 0
}

func (x *FlowInfo) GetCumLopriUsageBytes() int64 {
	if x != nil {
		return x.CumLopriUsageBytes
	}
	return 0
}

func (x *FlowInfo) GetCurrentlyLopri() bool {
	if x != nil {
		return x.CurrentlyLopri
	}
	return false
}

type AggInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent   *FlowInfo   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Children []*FlowInfo `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *AggInfo) Reset() {
	*x = AggInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggInfo) ProtoMessage() {}

func (x *AggInfo) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggInfo.ProtoReflect.Descriptor instead.
func (*AggInfo) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{2}
}

func (x *AggInfo) GetParent() *FlowInfo {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *AggInfo) GetChildren() []*FlowInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

type InfoBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundler   *FlowMarker            `protobuf:"bytes,1,opt,name=bundler,proto3" json:"bundler,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FlowInfos []*FlowInfo            `protobuf:"bytes,2,rep,name=flow_infos,json=flowInfos,proto3" json:"flow_infos,omitempty"`
}

func (x *InfoBundle) Reset() {
	*x = InfoBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoBundle) ProtoMessage() {}

func (x *InfoBundle) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoBundle.ProtoReflect.Descriptor instead.
func (*InfoBundle) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{3}
}

func (x *InfoBundle) GetBundler() *FlowMarker {
	if x != nil {
		return x.Bundler
	}
	return nil
}

func (x *InfoBundle) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *InfoBundle) GetFlowInfos() []*FlowInfo {
	if x != nil {
		return x.FlowInfos
	}
	return nil
}

type FlowAlloc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow              *FlowMarker `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	HipriRateLimitBps int64       `protobuf:"varint,2,opt,name=hipri_rate_limit_bps,json=hipriRateLimitBps,proto3" json:"hipri_rate_limit_bps,omitempty"`
	LopriRateLimitBps int64       `protobuf:"varint,3,opt,name=lopri_rate_limit_bps,json=lopriRateLimitBps,proto3" json:"lopri_rate_limit_bps,omitempty"`
}

func (x *FlowAlloc) Reset() {
	*x = FlowAlloc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowAlloc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowAlloc) ProtoMessage() {}

func (x *FlowAlloc) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowAlloc.ProtoReflect.Descriptor instead.
func (*FlowAlloc) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{4}
}

func (x *FlowAlloc) GetFlow() *FlowMarker {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowAlloc) GetHipriRateLimitBps() int64 {
	if x != nil {
		return x.HipriRateLimitBps
	}
	return 0
}

func (x *FlowAlloc) GetLopriRateLimitBps() int64 {
	if x != nil {
		return x.LopriRateLimitBps
	}
	return 0
}

type AllocBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowAllocs []*FlowAlloc `protobuf:"bytes,1,rep,name=flow_allocs,json=flowAllocs,proto3" json:"flow_allocs,omitempty"`
}

func (x *AllocBundle) Reset() {
	*x = AllocBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocBundle) ProtoMessage() {}

func (x *AllocBundle) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocBundle.ProtoReflect.Descriptor instead.
func (*AllocBundle) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{5}
}

func (x *AllocBundle) GetFlowAllocs() []*FlowAlloc {
	if x != nil {
		return x.FlowAllocs
	}
	return nil
}

var File_heyp_proto_heyp_proto protoreflect.FileDescriptor

var file_heyp_proto_heyp_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x65, 0x79, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x79,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x44, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73,
	0x74, 0x5f, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x44,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e,
	0x75, 0x6d, 0x22, 0xc5, 0x02, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x70, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x77, 0x6d, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x77, 0x6d, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75,
	0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x63,
	0x75, 0x6d, 0x5f, 0x68, 0x69, 0x70, 0x72, 0x69, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x75, 0x6d, 0x48,
	0x69, 0x70, 0x72, 0x69, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x63, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x70, 0x72, 0x69, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63,
	0x75, 0x6d, 0x4c, 0x6f, 0x70, 0x72, 0x69, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x6c,
	0x6f, 0x70, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x6f, 0x70, 0x72, 0x69, 0x22, 0x69, 0x0a, 0x07, 0x41, 0x67,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x33, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x2f, 0x0a, 0x14, 0x68, 0x69, 0x70, 0x72, 0x69, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68,
	0x69, 0x70, 0x72, 0x69, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x70, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x70, 0x72, 0x69, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6c, 0x6f, 0x70, 0x72, 0x69, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x70,
	0x73, 0x22, 0x45, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x2a, 0x27, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10,
	0x02, 0x32, 0x55, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x79, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6c, 0x75, 0x79, 0x6f, 0x6c, 0x2f, 0x68, 0x65,
	0x79, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_heyp_proto_heyp_proto_rawDescOnce sync.Once
	file_heyp_proto_heyp_proto_rawDescData = file_heyp_proto_heyp_proto_rawDesc
)

func file_heyp_proto_heyp_proto_rawDescGZIP() []byte {
	file_heyp_proto_heyp_proto_rawDescOnce.Do(func() {
		file_heyp_proto_heyp_proto_rawDescData = protoimpl.X.CompressGZIP(file_heyp_proto_heyp_proto_rawDescData)
	})
	return file_heyp_proto_heyp_proto_rawDescData
}

var file_heyp_proto_heyp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_heyp_proto_heyp_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_heyp_proto_heyp_proto_goTypes = []interface{}{
	(Protocol)(0),                 // 0: heyp.proto.Protocol
	(*FlowMarker)(nil),            // 1: heyp.proto.FlowMarker
	(*FlowInfo)(nil),              // 2: heyp.proto.FlowInfo
	(*AggInfo)(nil),               // 3: heyp.proto.AggInfo
	(*InfoBundle)(nil),            // 4: heyp.proto.InfoBundle
	(*FlowAlloc)(nil),             // 5: heyp.proto.FlowAlloc
	(*AllocBundle)(nil),           // 6: heyp.proto.AllocBundle
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_heyp_proto_heyp_proto_depIdxs = []int32{
	0,  // 0: heyp.proto.FlowMarker.protocol:type_name -> heyp.proto.Protocol
	1,  // 1: heyp.proto.FlowInfo.flow:type_name -> heyp.proto.FlowMarker
	2,  // 2: heyp.proto.AggInfo.parent:type_name -> heyp.proto.FlowInfo
	2,  // 3: heyp.proto.AggInfo.children:type_name -> heyp.proto.FlowInfo
	1,  // 4: heyp.proto.InfoBundle.bundler:type_name -> heyp.proto.FlowMarker
	7,  // 5: heyp.proto.InfoBundle.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 6: heyp.proto.InfoBundle.flow_infos:type_name -> heyp.proto.FlowInfo
	1,  // 7: heyp.proto.FlowAlloc.flow:type_name -> heyp.proto.FlowMarker
	5,  // 8: heyp.proto.AllocBundle.flow_allocs:type_name -> heyp.proto.FlowAlloc
	4,  // 9: heyp.proto.ClusterAgent.RegisterHost:input_type -> heyp.proto.InfoBundle
	6,  // 10: heyp.proto.ClusterAgent.RegisterHost:output_type -> heyp.proto.AllocBundle
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_heyp_proto_heyp_proto_init() }
func file_heyp_proto_heyp_proto_init() {
	if File_heyp_proto_heyp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_heyp_proto_heyp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowAlloc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heyp_proto_heyp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_heyp_proto_heyp_proto_goTypes,
		DependencyIndexes: file_heyp_proto_heyp_proto_depIdxs,
		EnumInfos:         file_heyp_proto_heyp_proto_enumTypes,
		MessageInfos:      file_heyp_proto_heyp_proto_msgTypes,
	}.Build()
	File_heyp_proto_heyp_proto = out.File
	file_heyp_proto_heyp_proto_rawDesc = nil
	file_heyp_proto_heyp_proto_goTypes = nil
	file_heyp_proto_heyp_proto_depIdxs = nil
}
