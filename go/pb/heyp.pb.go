// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.6
// source: heyp/proto/heyp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Protocol int32

const (
	Protocol_UNSET Protocol = 0
	Protocol_TCP   Protocol = 1
	Protocol_UDP   Protocol = 2
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "UNSET",
		1: "TCP",
		2: "UDP",
	}
	Protocol_value = map[string]int32{
		"UNSET": 0,
		"TCP":   1,
		"UDP":   2,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_heyp_proto_heyp_proto_enumTypes[0].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_heyp_proto_heyp_proto_enumTypes[0]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{0}
}

type FlowMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcDc    string   `protobuf:"bytes,1,opt,name=src_dc,json=srcDc,proto3" json:"src_dc,omitempty"`
	DstDc    string   `protobuf:"bytes,2,opt,name=dst_dc,json=dstDc,proto3" json:"dst_dc,omitempty"`
	Job      string   `protobuf:"bytes,10,opt,name=job,proto3" json:"job,omitempty"`
	HostId   uint64   `protobuf:"fixed64,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	SrcAddr  string   `protobuf:"bytes,4,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DstAddr  string   `protobuf:"bytes,5,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	Protocol Protocol `protobuf:"varint,6,opt,name=protocol,proto3,enum=heyp.proto.Protocol" json:"protocol,omitempty"`
	SrcPort  int32    `protobuf:"varint,7,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort  int32    `protobuf:"varint,8,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Seqnum   uint64   `protobuf:"varint,9,opt,name=seqnum,proto3" json:"seqnum,omitempty"` // seq number to distinguish flows with same ports
}

func (x *FlowMarker) Reset() {
	*x = FlowMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMarker) ProtoMessage() {}

func (x *FlowMarker) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMarker.ProtoReflect.Descriptor instead.
func (*FlowMarker) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{0}
}

func (x *FlowMarker) GetSrcDc() string {
	if x != nil {
		return x.SrcDc
	}
	return ""
}

func (x *FlowMarker) GetDstDc() string {
	if x != nil {
		return x.DstDc
	}
	return ""
}

func (x *FlowMarker) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *FlowMarker) GetHostId() uint64 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *FlowMarker) GetSrcAddr() string {
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *FlowMarker) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

func (x *FlowMarker) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_UNSET
}

func (x *FlowMarker) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *FlowMarker) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *FlowMarker) GetSeqnum() uint64 {
	if x != nil {
		return x.Seqnum
	}
	return 0
}

type FlowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow               *FlowMarker `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	PredictedDemandBps int64       `protobuf:"varint,2,opt,name=predicted_demand_bps,json=predictedDemandBps,proto3" json:"predicted_demand_bps,omitempty"`
	EwmaUsageBps       int64       `protobuf:"varint,3,opt,name=ewma_usage_bps,json=ewmaUsageBps,proto3" json:"ewma_usage_bps,omitempty"`
	// cum_usage_bytes = cum_hipri_usage_bytes + cum_lopri_usage_bytes
	CumUsageBytes      int64 `protobuf:"varint,4,opt,name=cum_usage_bytes,json=cumUsageBytes,proto3" json:"cum_usage_bytes,omitempty"`
	CumHipriUsageBytes int64 `protobuf:"varint,5,opt,name=cum_hipri_usage_bytes,json=cumHipriUsageBytes,proto3" json:"cum_hipri_usage_bytes,omitempty"`
	CumLopriUsageBytes int64 `protobuf:"varint,6,opt,name=cum_lopri_usage_bytes,json=cumLopriUsageBytes,proto3" json:"cum_lopri_usage_bytes,omitempty"`
	// currently_lopri indiciates whether a flow is exclusively using LOPRI
	// bandwidth.
	CurrentlyLopri bool `protobuf:"varint,7,opt,name=currently_lopri,json=currentlyLopri,proto3" json:"currently_lopri,omitempty"`
	// aux contains additional info that may not always be present.
	// Primarily used to dump data for later analysis.
	Aux *FlowInfo_AuxInfo `protobuf:"bytes,20,opt,name=aux,proto3" json:"aux,omitempty"`
}

func (x *FlowInfo) Reset() {
	*x = FlowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInfo) ProtoMessage() {}

func (x *FlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInfo.ProtoReflect.Descriptor instead.
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{1}
}

func (x *FlowInfo) GetFlow() *FlowMarker {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowInfo) GetPredictedDemandBps() int64 {
	if x != nil {
		return x.PredictedDemandBps
	}
	return 0
}

func (x *FlowInfo) GetEwmaUsageBps() int64 {
	if x != nil {
		return x.EwmaUsageBps
	}
	return 0
}

func (x *FlowInfo) GetCumUsageBytes() int64 {
	if x != nil {
		return x.CumUsageBytes
	}
	return 0
}

func (x *FlowInfo) GetCumHipriUsageBytes() int64 {
	if x != nil {
		return x.CumHipriUsageBytes
	}
	return 0
}

func (x *FlowInfo) GetCumLopriUsageBytes() int64 {
	if x != nil {
		return x.CumLopriUsageBytes
	}
	return 0
}

func (x *FlowInfo) GetCurrentlyLopri() bool {
	if x != nil {
		return x.CurrentlyLopri
	}
	return false
}

func (x *FlowInfo) GetAux() *FlowInfo_AuxInfo {
	if x != nil {
		return x.Aux
	}
	return nil
}

type AggInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent   *FlowInfo   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Children []*FlowInfo `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *AggInfo) Reset() {
	*x = AggInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggInfo) ProtoMessage() {}

func (x *AggInfo) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggInfo.ProtoReflect.Descriptor instead.
func (*AggInfo) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{2}
}

func (x *AggInfo) GetParent() *FlowInfo {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *AggInfo) GetChildren() []*FlowInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

type InfoBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundler   *FlowMarker            `protobuf:"bytes,1,opt,name=bundler,proto3" json:"bundler,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FlowInfos []*FlowInfo            `protobuf:"bytes,2,rep,name=flow_infos,json=flowInfos,proto3" json:"flow_infos,omitempty"`
}

func (x *InfoBundle) Reset() {
	*x = InfoBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoBundle) ProtoMessage() {}

func (x *InfoBundle) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoBundle.ProtoReflect.Descriptor instead.
func (*InfoBundle) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{3}
}

func (x *InfoBundle) GetBundler() *FlowMarker {
	if x != nil {
		return x.Bundler
	}
	return nil
}

func (x *InfoBundle) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *InfoBundle) GetFlowInfos() []*FlowInfo {
	if x != nil {
		return x.FlowInfos
	}
	return nil
}

type FlowAlloc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow              *FlowMarker `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	HipriRateLimitBps int64       `protobuf:"varint,2,opt,name=hipri_rate_limit_bps,json=hipriRateLimitBps,proto3" json:"hipri_rate_limit_bps,omitempty"`
	LopriRateLimitBps int64       `protobuf:"varint,3,opt,name=lopri_rate_limit_bps,json=lopriRateLimitBps,proto3" json:"lopri_rate_limit_bps,omitempty"`
}

func (x *FlowAlloc) Reset() {
	*x = FlowAlloc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowAlloc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowAlloc) ProtoMessage() {}

func (x *FlowAlloc) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowAlloc.ProtoReflect.Descriptor instead.
func (*FlowAlloc) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{4}
}

func (x *FlowAlloc) GetFlow() *FlowMarker {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowAlloc) GetHipriRateLimitBps() int64 {
	if x != nil {
		return x.HipriRateLimitBps
	}
	return 0
}

func (x *FlowAlloc) GetLopriRateLimitBps() int64 {
	if x != nil {
		return x.LopriRateLimitBps
	}
	return 0
}

type AllocBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowAllocs []*FlowAlloc `protobuf:"bytes,1,rep,name=flow_allocs,json=flowAllocs,proto3" json:"flow_allocs,omitempty"`
}

func (x *AllocBundle) Reset() {
	*x = AllocBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocBundle) ProtoMessage() {}

func (x *AllocBundle) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocBundle.ProtoReflect.Descriptor instead.
func (*AllocBundle) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{5}
}

func (x *AllocBundle) GetFlowAllocs() []*FlowAlloc {
	if x != nil {
		return x.FlowAllocs
	}
	return nil
}

type FlowInfo_AuxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppLimited      bool    `protobuf:"varint,1,opt,name=app_limited,json=appLimited,proto3" json:"app_limited,omitempty"`
	AtoMs           float64 `protobuf:"fixed64,2,opt,name=ato_ms,json=atoMs,proto3" json:"ato_ms,omitempty"`
	BbrCwndGain     float64 `protobuf:"fixed64,3,opt,name=bbr_cwnd_gain,json=bbrCwndGain,proto3" json:"bbr_cwnd_gain,omitempty"`
	BbrMinRttMs     float64 `protobuf:"fixed64,4,opt,name=bbr_min_rtt_ms,json=bbrMinRttMs,proto3" json:"bbr_min_rtt_ms,omitempty"`
	BbrPacingGain   float64 `protobuf:"fixed64,5,opt,name=bbr_pacing_gain,json=bbrPacingGain,proto3" json:"bbr_pacing_gain,omitempty"`
	MinRttMs        float64 `protobuf:"fixed64,6,opt,name=min_rtt_ms,json=minRttMs,proto3" json:"min_rtt_ms,omitempty"`
	RcvRttMs        float64 `protobuf:"fixed64,7,opt,name=rcv_rtt_ms,json=rcvRttMs,proto3" json:"rcv_rtt_ms,omitempty"`
	RtoMs           float64 `protobuf:"fixed64,8,opt,name=rto_ms,json=rtoMs,proto3" json:"rto_ms,omitempty"`
	RttMs           float64 `protobuf:"fixed64,9,opt,name=rtt_ms,json=rttMs,proto3" json:"rtt_ms,omitempty"`
	RttVarMs        float64 `protobuf:"fixed64,10,opt,name=rtt_var_ms,json=rttVarMs,proto3" json:"rtt_var_ms,omitempty"`
	Advmss          int64   `protobuf:"varint,11,opt,name=advmss,proto3" json:"advmss,omitempty"`
	Backoff         int64   `protobuf:"varint,12,opt,name=backoff,proto3" json:"backoff,omitempty"`
	BbrBw           int64   `protobuf:"varint,13,opt,name=bbr_bw,json=bbrBw,proto3" json:"bbr_bw,omitempty"`
	BusyTimeMs      int64   `protobuf:"varint,14,opt,name=busy_time_ms,json=busyTimeMs,proto3" json:"busy_time_ms,omitempty"`
	BytesAcked      int64   `protobuf:"varint,15,opt,name=bytes_acked,json=bytesAcked,proto3" json:"bytes_acked,omitempty"`
	BytesReceived   int64   `protobuf:"varint,16,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	BytesRetrans    int64   `protobuf:"varint,17,opt,name=bytes_retrans,json=bytesRetrans,proto3" json:"bytes_retrans,omitempty"`
	Cwnd            int64   `protobuf:"varint,18,opt,name=cwnd,proto3" json:"cwnd,omitempty"`
	DataSegsIn      int64   `protobuf:"varint,19,opt,name=data_segs_in,json=dataSegsIn,proto3" json:"data_segs_in,omitempty"`
	DataSegsOut     int64   `protobuf:"varint,20,opt,name=data_segs_out,json=dataSegsOut,proto3" json:"data_segs_out,omitempty"`
	Delivered       int64   `protobuf:"varint,21,opt,name=delivered,proto3" json:"delivered,omitempty"`
	DeliveredCe     int64   `protobuf:"varint,22,opt,name=delivered_ce,json=deliveredCe,proto3" json:"delivered_ce,omitempty"`
	DeliveryRate    int64   `protobuf:"varint,23,opt,name=delivery_rate,json=deliveryRate,proto3" json:"delivery_rate,omitempty"`
	DsackDups       int64   `protobuf:"varint,24,opt,name=dsack_dups,json=dsackDups,proto3" json:"dsack_dups,omitempty"`
	Fackets         int64   `protobuf:"varint,25,opt,name=fackets,proto3" json:"fackets,omitempty"`
	LastackMs       int64   `protobuf:"varint,26,opt,name=lastack_ms,json=lastackMs,proto3" json:"lastack_ms,omitempty"`
	LastrcvMs       int64   `protobuf:"varint,27,opt,name=lastrcv_ms,json=lastrcvMs,proto3" json:"lastrcv_ms,omitempty"`
	LastsndMs       int64   `protobuf:"varint,28,opt,name=lastsnd_ms,json=lastsndMs,proto3" json:"lastsnd_ms,omitempty"`
	Lost            int64   `protobuf:"varint,29,opt,name=lost,proto3" json:"lost,omitempty"`
	Mss             int64   `protobuf:"varint,30,opt,name=mss,proto3" json:"mss,omitempty"`
	NotSent         int64   `protobuf:"varint,31,opt,name=not_sent,json=notSent,proto3" json:"not_sent,omitempty"`
	PacingRate      int64   `protobuf:"varint,32,opt,name=pacing_rate,json=pacingRate,proto3" json:"pacing_rate,omitempty"`
	PacingRateMax   int64   `protobuf:"varint,33,opt,name=pacing_rate_max,json=pacingRateMax,proto3" json:"pacing_rate_max,omitempty"`
	Pmtu            int64   `protobuf:"varint,34,opt,name=pmtu,proto3" json:"pmtu,omitempty"`
	Qack            int64   `protobuf:"varint,35,opt,name=qack,proto3" json:"qack,omitempty"`
	RcvSpace        int64   `protobuf:"varint,36,opt,name=rcv_space,json=rcvSpace,proto3" json:"rcv_space,omitempty"`
	RcvSsthresh     int64   `protobuf:"varint,37,opt,name=rcv_ssthresh,json=rcvSsthresh,proto3" json:"rcv_ssthresh,omitempty"`
	RcvWscale       int64   `protobuf:"varint,38,opt,name=rcv_wscale,json=rcvWscale,proto3" json:"rcv_wscale,omitempty"`
	Rcvmss          int64   `protobuf:"varint,39,opt,name=rcvmss,proto3" json:"rcvmss,omitempty"`
	ReordSeen       int64   `protobuf:"varint,40,opt,name=reord_seen,json=reordSeen,proto3" json:"reord_seen,omitempty"`
	Reordering      int64   `protobuf:"varint,41,opt,name=reordering,proto3" json:"reordering,omitempty"`
	Retrans         int64   `protobuf:"varint,42,opt,name=retrans,proto3" json:"retrans,omitempty"`
	RetransTotal    int64   `protobuf:"varint,43,opt,name=retrans_total,json=retransTotal,proto3" json:"retrans_total,omitempty"`
	RwndLimitedMs   int64   `protobuf:"varint,44,opt,name=rwnd_limited_ms,json=rwndLimitedMs,proto3" json:"rwnd_limited_ms,omitempty"`
	Sacked          int64   `protobuf:"varint,45,opt,name=sacked,proto3" json:"sacked,omitempty"`
	SegsIn          int64   `protobuf:"varint,46,opt,name=segs_in,json=segsIn,proto3" json:"segs_in,omitempty"`
	SegsOut         int64   `protobuf:"varint,47,opt,name=segs_out,json=segsOut,proto3" json:"segs_out,omitempty"`
	SndWscale       int64   `protobuf:"varint,48,opt,name=snd_wscale,json=sndWscale,proto3" json:"snd_wscale,omitempty"`
	SndbufLimitedMs int64   `protobuf:"varint,49,opt,name=sndbuf_limited_ms,json=sndbufLimitedMs,proto3" json:"sndbuf_limited_ms,omitempty"`
	Ssthresh        int64   `protobuf:"varint,50,opt,name=ssthresh,proto3" json:"ssthresh,omitempty"`
	Unacked         int64   `protobuf:"varint,51,opt,name=unacked,proto3" json:"unacked,omitempty"`
}

func (x *FlowInfo_AuxInfo) Reset() {
	*x = FlowInfo_AuxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heyp_proto_heyp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowInfo_AuxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInfo_AuxInfo) ProtoMessage() {}

func (x *FlowInfo_AuxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_heyp_proto_heyp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInfo_AuxInfo.ProtoReflect.Descriptor instead.
func (*FlowInfo_AuxInfo) Descriptor() ([]byte, []int) {
	return file_heyp_proto_heyp_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FlowInfo_AuxInfo) GetAppLimited() bool {
	if x != nil {
		return x.AppLimited
	}
	return false
}

func (x *FlowInfo_AuxInfo) GetAtoMs() float64 {
	if x != nil {
		return x.AtoMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBbrCwndGain() float64 {
	if x != nil {
		return x.BbrCwndGain
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBbrMinRttMs() float64 {
	if x != nil {
		return x.BbrMinRttMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBbrPacingGain() float64 {
	if x != nil {
		return x.BbrPacingGain
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetMinRttMs() float64 {
	if x != nil {
		return x.MinRttMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRcvRttMs() float64 {
	if x != nil {
		return x.RcvRttMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRtoMs() float64 {
	if x != nil {
		return x.RtoMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRttMs() float64 {
	if x != nil {
		return x.RttMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRttVarMs() float64 {
	if x != nil {
		return x.RttVarMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetAdvmss() int64 {
	if x != nil {
		return x.Advmss
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBackoff() int64 {
	if x != nil {
		return x.Backoff
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBbrBw() int64 {
	if x != nil {
		return x.BbrBw
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBusyTimeMs() int64 {
	if x != nil {
		return x.BusyTimeMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBytesAcked() int64 {
	if x != nil {
		return x.BytesAcked
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetBytesRetrans() int64 {
	if x != nil {
		return x.BytesRetrans
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetCwnd() int64 {
	if x != nil {
		return x.Cwnd
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetDataSegsIn() int64 {
	if x != nil {
		return x.DataSegsIn
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetDataSegsOut() int64 {
	if x != nil {
		return x.DataSegsOut
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetDelivered() int64 {
	if x != nil {
		return x.Delivered
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetDeliveredCe() int64 {
	if x != nil {
		return x.DeliveredCe
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetDeliveryRate() int64 {
	if x != nil {
		return x.DeliveryRate
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetDsackDups() int64 {
	if x != nil {
		return x.DsackDups
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetFackets() int64 {
	if x != nil {
		return x.Fackets
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetLastackMs() int64 {
	if x != nil {
		return x.LastackMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetLastrcvMs() int64 {
	if x != nil {
		return x.LastrcvMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetLastsndMs() int64 {
	if x != nil {
		return x.LastsndMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetLost() int64 {
	if x != nil {
		return x.Lost
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetMss() int64 {
	if x != nil {
		return x.Mss
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetNotSent() int64 {
	if x != nil {
		return x.NotSent
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetPacingRate() int64 {
	if x != nil {
		return x.PacingRate
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetPacingRateMax() int64 {
	if x != nil {
		return x.PacingRateMax
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetPmtu() int64 {
	if x != nil {
		return x.Pmtu
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetQack() int64 {
	if x != nil {
		return x.Qack
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRcvSpace() int64 {
	if x != nil {
		return x.RcvSpace
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRcvSsthresh() int64 {
	if x != nil {
		return x.RcvSsthresh
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRcvWscale() int64 {
	if x != nil {
		return x.RcvWscale
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRcvmss() int64 {
	if x != nil {
		return x.Rcvmss
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetReordSeen() int64 {
	if x != nil {
		return x.ReordSeen
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetReordering() int64 {
	if x != nil {
		return x.Reordering
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRetrans() int64 {
	if x != nil {
		return x.Retrans
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRetransTotal() int64 {
	if x != nil {
		return x.RetransTotal
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetRwndLimitedMs() int64 {
	if x != nil {
		return x.RwndLimitedMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetSacked() int64 {
	if x != nil {
		return x.Sacked
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetSegsIn() int64 {
	if x != nil {
		return x.SegsIn
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetSegsOut() int64 {
	if x != nil {
		return x.SegsOut
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetSndWscale() int64 {
	if x != nil {
		return x.SndWscale
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetSndbufLimitedMs() int64 {
	if x != nil {
		return x.SndbufLimitedMs
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetSsthresh() int64 {
	if x != nil {
		return x.Ssthresh
	}
	return 0
}

func (x *FlowInfo_AuxInfo) GetUnacked() int64 {
	if x != nil {
		return x.Unacked
	}
	return 0
}

var File_heyp_proto_heyp_proto protoreflect.FileDescriptor

var file_heyp_proto_heyp_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x65, 0x79, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x79,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x44, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73,
	0x74, 0x5f, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x44,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e,
	0x75, 0x6d, 0x22, 0xfc, 0x0e, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x70, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x77, 0x6d, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x77, 0x6d, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75,
	0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x63,
	0x75, 0x6d, 0x5f, 0x68, 0x69, 0x70, 0x72, 0x69, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x75, 0x6d, 0x48,
	0x69, 0x70, 0x72, 0x69, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x63, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x70, 0x72, 0x69, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63,
	0x75, 0x6d, 0x4c, 0x6f, 0x70, 0x72, 0x69, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x6c,
	0x6f, 0x70, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x6f, 0x70, 0x72, 0x69, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x75,
	0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x75,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x75, 0x78, 0x1a, 0x84, 0x0c, 0x0a, 0x07, 0x41,
	0x75, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x74, 0x6f, 0x5f, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x74, 0x6f, 0x4d, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x62, 0x62, 0x72, 0x5f, 0x63, 0x77, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x62, 0x72, 0x43, 0x77, 0x6e, 0x64, 0x47, 0x61,
	0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x62, 0x62, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x74,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x62, 0x72, 0x4d,
	0x69, 0x6e, 0x52, 0x74, 0x74, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x62, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x62, 0x62, 0x72, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x74, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a,
	0x0a, 0x72, 0x63, 0x76, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x72, 0x63, 0x76, 0x52, 0x74, 0x74, 0x4d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x74, 0x6f, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x74, 0x6f,
	0x4d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x74, 0x74,
	0x5f, 0x76, 0x61, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72,
	0x74, 0x74, 0x56, 0x61, 0x72, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x76, 0x6d, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x64, 0x76, 0x6d, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x62, 0x72,
	0x5f, 0x62, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x62, 0x72, 0x42, 0x77,
	0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x77, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x77, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x67, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x67, 0x73, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65,
	0x67, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x43, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x70, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x72,
	0x63, 0x76, 0x5f, 0x6d, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x72, 0x63, 0x76, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x6e,
	0x64, 0x5f, 0x6d, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x73, 0x6e, 0x64, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6d, 0x74, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x6d, 0x74, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x61, 0x63, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x71, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x63, 0x76, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x63, 0x76, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x63, 0x76, 0x5f, 0x73, 0x73, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x63, 0x76, 0x53,
	0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x63, 0x76, 0x5f, 0x77,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x63, 0x76,
	0x57, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x63, 0x76, 0x6d, 0x73, 0x73,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x63, 0x76, 0x6d, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x77, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x77, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x65, 0x67, 0x73, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x64, 0x5f, 0x77, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6e, 0x64, 0x57, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6e, 0x64, 0x62,
	0x75, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x22, 0x69, 0x0a, 0x07, 0x41, 0x67, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xad, 0x01, 0x0a,
	0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65,
	0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x99, 0x01, 0x0a,
	0x09, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x69, 0x70, 0x72, 0x69, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x69, 0x70, 0x72, 0x69, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x70, 0x72, 0x69,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x6f, 0x70, 0x72, 0x69, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x70, 0x73, 0x22, 0x45, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x2a,
	0x27, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x32, 0x55, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x1a, 0x17, 0x2e, 0x68, 0x65, 0x79, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6c,
	0x75, 0x79, 0x6f, 0x6c, 0x2f, 0x68, 0x65, 0x79, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_heyp_proto_heyp_proto_rawDescOnce sync.Once
	file_heyp_proto_heyp_proto_rawDescData = file_heyp_proto_heyp_proto_rawDesc
)

func file_heyp_proto_heyp_proto_rawDescGZIP() []byte {
	file_heyp_proto_heyp_proto_rawDescOnce.Do(func() {
		file_heyp_proto_heyp_proto_rawDescData = protoimpl.X.CompressGZIP(file_heyp_proto_heyp_proto_rawDescData)
	})
	return file_heyp_proto_heyp_proto_rawDescData
}

var file_heyp_proto_heyp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_heyp_proto_heyp_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_heyp_proto_heyp_proto_goTypes = []interface{}{
	(Protocol)(0),                 // 0: heyp.proto.Protocol
	(*FlowMarker)(nil),            // 1: heyp.proto.FlowMarker
	(*FlowInfo)(nil),              // 2: heyp.proto.FlowInfo
	(*AggInfo)(nil),               // 3: heyp.proto.AggInfo
	(*InfoBundle)(nil),            // 4: heyp.proto.InfoBundle
	(*FlowAlloc)(nil),             // 5: heyp.proto.FlowAlloc
	(*AllocBundle)(nil),           // 6: heyp.proto.AllocBundle
	(*FlowInfo_AuxInfo)(nil),      // 7: heyp.proto.FlowInfo.AuxInfo
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_heyp_proto_heyp_proto_depIdxs = []int32{
	0,  // 0: heyp.proto.FlowMarker.protocol:type_name -> heyp.proto.Protocol
	1,  // 1: heyp.proto.FlowInfo.flow:type_name -> heyp.proto.FlowMarker
	7,  // 2: heyp.proto.FlowInfo.aux:type_name -> heyp.proto.FlowInfo.AuxInfo
	2,  // 3: heyp.proto.AggInfo.parent:type_name -> heyp.proto.FlowInfo
	2,  // 4: heyp.proto.AggInfo.children:type_name -> heyp.proto.FlowInfo
	1,  // 5: heyp.proto.InfoBundle.bundler:type_name -> heyp.proto.FlowMarker
	8,  // 6: heyp.proto.InfoBundle.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 7: heyp.proto.InfoBundle.flow_infos:type_name -> heyp.proto.FlowInfo
	1,  // 8: heyp.proto.FlowAlloc.flow:type_name -> heyp.proto.FlowMarker
	5,  // 9: heyp.proto.AllocBundle.flow_allocs:type_name -> heyp.proto.FlowAlloc
	4,  // 10: heyp.proto.ClusterAgent.RegisterHost:input_type -> heyp.proto.InfoBundle
	6,  // 11: heyp.proto.ClusterAgent.RegisterHost:output_type -> heyp.proto.AllocBundle
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_heyp_proto_heyp_proto_init() }
func file_heyp_proto_heyp_proto_init() {
	if File_heyp_proto_heyp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_heyp_proto_heyp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowAlloc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heyp_proto_heyp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowInfo_AuxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heyp_proto_heyp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_heyp_proto_heyp_proto_goTypes,
		DependencyIndexes: file_heyp_proto_heyp_proto_depIdxs,
		EnumInfos:         file_heyp_proto_heyp_proto_enumTypes,
		MessageInfos:      file_heyp_proto_heyp_proto_msgTypes,
	}.Build()
	File_heyp_proto_heyp_proto = out.File
	file_heyp_proto_heyp_proto_rawDesc = nil
	file_heyp_proto_heyp_proto_goTypes = nil
	file_heyp_proto_heyp_proto_depIdxs = nil
}
